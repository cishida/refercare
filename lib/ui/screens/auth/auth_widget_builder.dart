import 'package:firebase_auth/firebase_auth.dart';
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'package:provider/single_child_widget.dart';
import 'package:refercare/core/services/auth/firebase_auth_service.dart';

/// Used to create user-dependent objects that need to be accessible by all widgets.
/// This widgets should live above the [MaterialApp].
/// See [AuthWidget], a descendant widget that consumes the snapshot generated by this builder.
class AuthWidgetBuilder extends StatelessWidget {
  const AuthWidgetBuilder({
    Key? key,
    required this.builder,
  }) : super(key: key);
  final Widget Function(BuildContext, AsyncSnapshot<User?>) builder;

  List<SingleChildWidget> _buildProviders(User? user) {
    return [
      Provider<User?>.value(value: user),
      // NOTE: Any other user-bound providers here can be added here
    ];
  }

  @override
  Widget build(BuildContext context) {
    final authService = context.watch<FirebaseAuthService>();

    return StreamBuilder<User?>(
      stream: authService.onAuthStateChanged,
      builder: (BuildContext context, AsyncSnapshot<User?> snapshot) {
        if (snapshot.connectionState != ConnectionState.active) {
          return Container();
        }

        final User? user = snapshot.data;
        return MultiProvider(
          providers: _buildProviders(user),
          child: builder(context, snapshot),
        );
      },
    );
  }
}
